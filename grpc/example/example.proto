/*
 * Copyright (c) 2018 - present.  Boling Consulting Solutions (bcsw.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.bcsw.examples.exampleproto";
option java_outer_classname = "ExampleProto";

package example;

// The example service definition.
service Worker {
    // Sends a single request and expect back a single response
    rpc RequestUnaryOperation(UnaryRequest) returns (UnaryResponse) {}

    // Send several requests and will be summarized in a single response
    rpc RequestClientSideStream(stream ClientStreamRequest) returns (ClientResponse) {}

    // Send a single request and get lots of responses
    rpc RequestServerSideStream(ServerRequest) returns (stream ServerStreamResponse) {}


    // Send back and forth like a crazy person
    rpc BiDirectional(stream PeerMessage) returns (stream PeerMessage) {}
}

message UnaryRequest {
    int64 utc_timestamp = 1;   // UTC seconds since epoch
    uint32 pon_id = 2;
    uint32 onu_id = 3;
    bytes payload = 4;
}

// The response to a request
message UnaryResponse {
    int64 utc_timestamp = 1;   // Copied from Request
    uint32 pon_id = 2;
    uint32 onu_id = 3;
    bytes payload = 4;
}

message ClientStreamRequest {
    bool  IamDone= 1;       // When true, send a response
}

message ClientResponse {
    string  responseMessage = 1;    // Tell them how many we got
}

message ServerRequest {
    uint32 pleaseSend = 1;          // How many responses
}

message ServerStreamResponse {
    uint32 msgNumber = 1;           // Which message
}

message PeerMessage {
    string printThisPlease = 1;     // Something to log
}